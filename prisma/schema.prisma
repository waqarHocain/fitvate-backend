generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(uuid())
  name           String?
  email          String?         @unique
  password       String?
  profilePic     String?
  mobileNumber   String?         @unique
  dateofBirth    String?
  gender         String?
  height         String?
  weight         String?
  provider       String?
  fcm_token      String?
  googleId       String?         @unique
  facebookId     String?         @unique
  purchases      Purchase[]
  likedExercises LikedExercise[]
  LikedArticle   LikedArticle[]
  WorkoutPlan    WorkoutPlan[]
  Challenge      Challenge[]
  Reminder       Reminder[]
  articles       Article[]
}

model WorkoutPlan {
  id              String  @id @default(uuid())
  planId          String  @unique
  planName        String
  planDescription String?
  planThemeColor  String?
  planCategory    String?
  isPurchased     Boolean @default(true)
  duration        String?
  goal            String?
  planType        String?
  weeks           Week[]
  User            User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
}

model Week {
  id            String      @id @default(uuid())
  weekId        String      @unique
  isCompleted   Boolean     @default(false)
  days          Day[]
  WorkoutPlan   WorkoutPlan @relation(fields: [workoutPlanId], references: [id], onDelete: Cascade)
  workoutPlanId String
}

model Day {
  id          String     @id @default(uuid())
  dayId       String     @unique
  isCompleted Boolean    @default(false)
  exercises   Exercise[]

  Week   Week   @relation(fields: [weekId], references: [id], onDelete: Cascade)
  weekId String
}

model Exercise {
  id           String  @id @default(uuid())
  exerciseId   String  @unique
  displayIndex Int
  weightUsed   String
  isCompleted  Boolean @default(false)

  Day   Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)
  dayId String
}

model Challenge {
  id          String @id @default(uuid())
  challengeId String @unique
  User        User   @relation(fields: [userId], references: [id])
  userId      String
}

model Reminder {
  id           String              @id @default(uuid())
  reminderId   String              @unique
  reminderName String
  reminderTime String
  status       String
  uuid         String
  repeatDays   ReminderRepeatDay[]
  User         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model ReminderRepeatDay {
  id         String   @id @default(uuid())
  dayNum     Int
  Reminder   Reminder @relation(fields: [reminderId], references: [id], onDelete: Cascade)
  reminderId String
}

model LikedExercise {
  id         String @id @default(uuid())
  exerciseId String @unique
  User       User   @relation(fields: [userId], references: [id])
  userId     String
}

model LikedArticle {
  id        String @id @default(uuid())
  articleId String @unique
  User      User   @relation(fields: [userId], references: [id])
  userId    String
}

model Purchase {
  id            String @id @default(uuid())
  orderId       String
  productId     String
  purchaseToken String
  User          User   @relation(fields: [userId], references: [id])
  userId        String
}

model Article {
  id       String  @id @default(uuid())
  title    String
  body     String
  imageUrl String?
  category String
  User     User    @relation(fields: [userId], references: [id])
  userId   String
}
